### 1.자바는 운영체제에 독립적

2.자바의 특징
    1)운영체제에 독립적
     -운영체제와 하드웨어에 관계없이 실행
     -자바 응용프로그램은 JVM하고만 통신, JVM이 자바 응용프로그램으로부터 받은 명령을 운영체제가 이해하도록 변환,전달
     -JVM은 운영체제에 종속적, 운영체제에 맞는 JVM제공
    2)객체지향언어
     -상속,캡슐화,다형성
    3)자동 메모리 관리(Garbage Collection)
    4)멀티 쓰레드 지원
    5)동적 로딩
     -필요한 시점에 클래스 로딩

3.자바 가상 머신(JVM)
    1)자바를 실행하기 위한 가상 기계, '컴퓨터(머신)'를 사용해서 '자바를 실행하기 위한 가상 컴퓨터'
    2)가상기계(VM)은 소프트웨어로 구현된 하드웨어, 하드웨어들을 소프트웨어화 하는 예로 TV와 비디오 -> 윈도우 미디어 플레이어, 오디오 시스템 -> 윈앰프 등
    3)자바 애플리케이션은 모두 가상 컴퓨터(JVM)에서만 실행
    4)자바 애플리케이션은 JVM을 거치는데 바이트코드(컴파일된 자바코드)는 하드웨어에 맞게 완전히 컴파일된 상태가 아니기 때문에 실행 시에 해석(interpret)을 한다.

4.자바 개발도구(JDK)
    1)JDK 설치시 자바가상머신과 자바클래스 라이브러리 외 자바 개발에 필요한 프로그램들이 설치됨
    2)환경변수: WINDOWS에서 사용하는 설정정보가 담겨있는 변수

5.Hello.java 실행
    1)Hello.java -javac.exe(소스파일) 컴파일-> Hello.class(클래스 파일) 생성 -java.exe(자바 인터프리터) 실행-> "Hello world" 출력
    2)모든 코드는 반드시 클래스 안에 존재 (package문, import문 예외)
    3)public static void main(String[]args) 는 main메서드의 선언부로 java.exe에 의해 호출되도록 약속됨
    4)main메서드의 괄호{}는 메서드의 시작과 끝, Java 애플리케이션은 main 메서더의 호출로 시작,종료
    5)Java 애플리케이션에는 반드시 main메서드를 포함한 클래스가 반드시 하나가 있어야 한다.
    6)cmd에서 실행시 클래스(*.class) 로드 -> 클래스파일 검사 -> main(String[]args) 호출, 모두 실행시 프로그램 종료 후 사용했던 자원들 모두 반환

6.통합 개발 환경(IDE, Integrated Development Environment)
    1) 이클립스 - 여러 개의 작은 창들이 있는데 하나의 창을 뷰(view), 뷰들로 구성된 화면 전체를 구성된 화면 전체를 퍼스펙티브(perspective)라고 한다.
    
